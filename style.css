/* ====== RESET / BAZA ====== */
* {
  margin: 0;
  padding: 0;
  border: 0;
  line-height: 1.25;
  color: #fff2f0;
  font-family: 'JetBrains Mono', monospace;
}
:root{
  --bg-dark: #000424;
  --bg-darker: #000210;
  --accent: #0d6efd;
  --text: #fff2f0;
  /* + stały wymiar miniatury/wiersza placeholdera */
  --cap-size: 58px;                  /* desktop */
}

/* ====== TŁO: PARTICLES ====== */
#bgParticles {
  position: fixed;
  left: 0; top: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  pointer-events: none;
  background: radial-gradient(160% 120% at 50% 0%, var(--bg-dark), var(--bg-darker));
}

/* ====== GŁÓWNY LAYOUT ====== */
#app{ position: relative; z-index: 1; }

.layout{
  display: grid;
  grid-template-columns: 1fr 380px;
  gap: 28px;
  align-items: start;
  width: min(1400px, 95vw);
  margin: 20px auto 40px;
}

#board-col{ min-width: 0; }
#panel-col{ min-width: 0; }

/* ====== KARTY PANELU ====== */
.panel-card{
  background: rgba(0,4,36,0.85);
  border: 2px solid var(--accent);
  border-radius: 18px;
  box-shadow: 0 0 18px rgba(13,110,253,.45);
  color: var(--text);
  padding: 14px 16px;
  margin-bottom: 16px;
}
.panel-card h3{
  margin: 0 0 10px; 
  font-size: 18px;
}

.panel-row{
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
}

/* ====== TURN INDICATOR ====== */
.turn-indicator{ display:flex; align-items:center; gap:10px; font-weight:600; }
.turn-indicator .dot{
  width:14px; height:14px; border-radius:50%;
  box-shadow: 0 0 10px currentColor;
}
.turn-indicator.white .dot{ background:#fff2f0; color:#fff2f0;}
.turn-indicator.white .label{ color:#fff2f0; }
.turn-indicator.black .dot{ background:#0d6efd; color:#0d6efd;}
.turn-indicator.black .label{ color:#0d6efd; }

/* ====== LOGI RUCHÓW ====== */
.logs-wrap{ max-height: 260px; overflow:auto; }
.moves-table{ width:100%; border-collapse: collapse; font-family: 'JetBrains Mono', monospace; }
.moves-table th, .moves-table td{
  border-bottom:1px solid rgba(255,242,240,0.12);
  padding:6px 8px; font-size: 14px; text-align:left;
}
.moves-table th{ position:sticky; top:0; background:rgba(0,4,36,0.95); }

/* ====== STATUS BADGES ====== */
.badge{
  display:inline-block; font-size:13px; padding:6px 10px;
  border-radius: 999px; border:1px solid transparent; margin-right:8px;
}
.badge-ok{ background:#072a6b; border-color:#0d6efd; color:#cfe6ff; }
.badge-warn{ background:#6b3a07; border-color:#fd7e14; color:#ffe3cf; }
.badge-err{ background:#6b0707; border-color:#dc3545; color:#ffd6da; }
.badge-muted{ background:rgba(255,242,240,0.06); color:#fff2f0; border-color:rgba(255,242,240,0.18); }

/* ====== AKCJE ====== */
.btn-reset{
  width:100%; padding:10px 12px; border-radius:12px;
  background:var(--accent); color:var(--text); border:2px solid var(--accent);
  box-shadow: 0 0 12px rgba(13,110,253,.5);
  cursor:pointer; font-weight:600;
}
.btn-reset:hover{ transform: translateY(-1px); box-shadow: 0 0 18px rgba(13,110,253,.75); }

/* ====== RESPONSYWNOŚĆ ====== */
@media (max-width: 992px){
  .layout{ grid-template-columns: 1fr; }
  #panel-col{ order:2; }
  #board-col{ order:1; }
  .panel-row{ grid-template-columns: 1fr; }
}

@media (prefers-reduced-motion: reduce){
  #bgParticles{ display:none; }
}

/* ====== GAME OVER MODAL ====== */
.go-overlay {
  position: fixed;
  inset: 0;
  background: radial-gradient(120% 120% at 50% 0%, rgba(0,4,36,0.85), rgba(0,2,16,0.85));
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
.go-overlay.active { display: flex; }

.go-modal {
  width: min(560px, 92vw);
  background: rgba(0, 4, 36, 0.85);
  border: 4px var(--accent) solid;
  border-radius: 20px;
  box-shadow: 0 0 28px var(--accent);
  color: var(--text);
  text-align: center;
  padding: 28px 24px;
  backdrop-filter: blur(3px);
  transform: translateY(12px) scale(0.98);
  opacity: 0;
  animation: go-pop 420ms cubic-bezier(.2,.9,.2,1) forwards;
}
.go-modal h3 { font-size: clamp(22px, 3.2vw, 28px); margin: 0 0 6px 0; }
.go-modal p  { opacity: .9; margin: 0 0 18px 0; font-size: clamp(15px, 2.4vw, 18px); }

.go-actions { display: flex; gap: 12px; justify-content: center; flex-wrap: wrap; }
.go-btn{
  font-size: 15px; padding: 10px 16px; border-radius: 12px; cursor: pointer;
  transition: transform .08s ease, box-shadow .2s ease, background .2s ease;
  border: 2px solid transparent;
}
.go-btn-primary{
  background: var(--accent);
  color: var(--text);
  border-color: var(--accent);
  box-shadow: 0 0 12px rgba(13,110,253,.6);
}
.go-btn-primary:hover{ transform: translateY(-1px); box-shadow: 0 0 18px rgba(13,110,253,.8); }
.go-btn-ghost{
  background: rgba(255,242,240,0.06);
  color: var(--text);
  border-color: rgba(255,242,240,0.25);
}
.go-btn-ghost:hover{ transform: translateY(-1px); background: rgba(255,242,240,0.12); }

#goConfetti {
  position: absolute; inset: 0; width: 100%; height: 100%; pointer-events: none;
}
@keyframes go-pop { to { transform: translateY(0) scale(1); opacity: 1; } }

/* =========================================================
   ===============  CAPTURED –  SEKCJA  =============
   ========================================================= */

/* siatka miniaturek (BASIS) */
.captured-grid{
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 8px;
  min-height: 0;                     /* było: 86px – usuwa rozpychanie */
  grid-auto-rows: var(--cap-size);   /* każdy rząd = rozmiar miniatury */
}

/* placeholdery SĄ siatką – wysokość na jeden rząd + scroll wewnątrz */
#captured-opponent,
#captured-player{
  /* te elementy mają też klasę .captured-grid, więc nadpisujemy tu bazę */
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-auto-rows: var(--cap-size);
  gap: 8px;

  height: var(--cap-size);
  min-height: var(--cap-size);
  max-height: var(--cap-size);
  overflow-y: auto;                  /* wewnętrzny scroll */
  overflow-x: hidden;

  background: rgba(0,4,36,0.85);
  border-radius: 12px;
}

/* wrapper pod miniaturą – bez dodatkowej poduszki, żeby 1 rząd = 1 miniatura */
.captured-grid .cap-wrap{
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background: radial-gradient(60% 60% at 50% 45%, rgba(255,242,240,.06), rgba(255,242,240,0) 70%);
  border-radius: 10px;
  padding: 0;                         /* było: 2px */
}

/* miniatury w stałym rozmiarze rzędu */
.captured-grid img.captured-piece{
  width: var(--cap-size);
  height: var(--cap-size);
  max-width: var(--cap-size);
  max-height: var(--cap-size);
  object-fit: contain;
  user-select: none;
  pointer-events: none;
}

/* czarne – efekt jak wcześniej */
.captured-grid img.captured-piece.is-black{
  filter: brightness(1.95) contrast(1.28) saturate(1.05)
          drop-shadow(0 0 3px #fff2f0) drop-shadow(0 0 6px #0d6efd) !important;
}

/* Logi – własny scroll, nie rozszerza karty */
.logs-wrap{
  max-height: 260px;
  overflow-y: auto;
  overflow-x: hidden;
}

/* Mobile/Tablet – mniejszy 1-rzędowy placeholder */
@media (max-width: 992px){
  :root{ --cap-size: 52px; }
}

/* --- Placeholdery: 1 rząd, scroll tylko wewnątrz miniaturek --- */
#captured-opponent .captured-grid,
#captured-player .captured-grid {
  height: 58px !important;      /* dokładnie jeden rząd */
  min-height: 58px !important;
  max-height: 58px !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
  display: grid !important;
  grid-auto-rows: 58px !important;
  gap: 8px;
}

/* Panel nie wymusza wysokości na karcie */
#captured-opponent,
#captured-player {
  height: auto !important;
  min-height: 0 !important;
  max-height: none !important;
  overflow: visible !important;
  display: block !important;
}

/* Miniatury nie powiększają komórki */
.captured-grid img.captured-piece {
  width: 58px !important;
  height: 58px !important;
  max-width: 58px !important;
  max-height: 58px !important;
  object-fit: contain;
}

/* Panel logów: ogranicz wysokość i wymuś scroll */
.logs-wrap {
  max-height: 260px !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
}

/* === Fix: placeholdery nie rosną, scroll tylko wewnątrz siatki === */
:root { --cap-size: 58px; } /* 1 rząd = rozmiar miniatury */

/* usuń rozpychanie przez Flexbox i wcześniejsze min-height */
#captured-opponent,
#captured-player{
  display: block !important;     /* było: flex */
  overflow: visible !important;
}

/* siatka jest scrollerem; jako flex-item potrzebuje min-height:0 (gdyby wrócił flex) */
#captured-opponent .captured-grid,
#captured-player  .captured-grid{
  height: var(--cap-size) !important;      /* dokładnie jeden rząd */
  min-height: 0 !important;                /* klucz: pozwól kurczyć się we flex-kontekście */
  max-height: var(--cap-size) !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
  grid-auto-rows: var(--cap-size) !important;
}

/* skasuj stare minimum 86px */
.captured-grid{ min-height: 0 !important; }

/* miniatury i wrap */
.captured-grid .cap-wrap{
  height: 100% !important;
  width: 100% !important;
  padding: 0 !important;
}
.captured-grid img.captured-piece{
  width: var(--cap-size) !important;
  height: var(--cap-size) !important;
  max-width: var(--cap-size) !important;
  max-height: var(--cap-size) !important;
  object-fit: contain;
  user-select: none;
  pointer-events: none;
}

/* Fallback: gdyby markup używał .captured-slot zamiast .cap-wrap */
#captured-opponent .captured-slot,
#captured-player  .captured-slot{
  width: var(--cap-size) !important;
  height: var(--cap-size) !important;
}

/* Logi – nie rozciągają karty, zawsze własny scroll */
.logs-wrap{
  max-height: 260px !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
}

/* === DESKTOP: pełny ekran, bez scrolla strony === */
@media (min-width: 993px){
  html, body { height: 100%; overflow: clip; }
  #app       { height: 100dvh; min-height: 100dvh; }
  .layout    { height: 100%; min-height: 0; margin: 12px auto; }
  #panel-col { max-height: calc(100dvh - 24px); overflow: hidden; }
}

/* === CAPTURED: 1 rząd = rozmiar miniatury; nadmiar przewijany wewnątrz === */
:root { --cap-size: 58px; }

/* Rodzic placeholdera nie wymusza własnych wysokości */
#captured-opponent,
#captured-player{
  height: auto !important;
  min-height: 0 !important;
  max-height: none !important;
  overflow: visible !important;
}

/* Obsłuż oba warianty struktury: gdy ID = siatka lub gdy siatka jest dzieckiem */
#captured-opponent.captured-grid,
#captured-player.captured-grid,
#captured-opponent > .captured-grid,
#captured-player  > .captured-grid{
  display: grid !important;
  grid-template-columns: repeat(4, var(--cap-size)) !important;
  grid-auto-rows: var(--cap-size) !important;
  gap: 8px !important;

  height: var(--cap-size) !important;      /* dokładnie jeden rząd */
  max-height: var(--cap-size) !important;
  min-height: 0 !important;                /* ważne w kontekście flex */
  overflow-y: auto !important;
  overflow-x: hidden !important;
  scrollbar-gutter: stable both-edges;
}

/* element siatki nie ma własnych minimów, żeby nie rozpychał */
.captured-grid{ min-height: 0 !important; }

/* Miniatury = stały wymiar rzędu */
.captured-grid .cap-wrap{ height: 100% !important; width: 100% !important; padding: 0 !important; display:flex; align-items:center; justify-content:center; }
.captured-grid img.captured-piece{
  width: var(--cap-size) !important;
  height: var(--cap-size) !important;
  max-width: var(--cap-size) !important;
  max-height: var(--cap-size) !important;
  object-fit: contain;
  user-select: none; pointer-events: none;
}

/* Logi – własny scroll, karta nie rośnie */
.logs-wrap{
  max-height: 260px !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
  min-height: 0 !important;
}
